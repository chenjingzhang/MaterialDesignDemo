<?xml version="1.0" encoding="utf-8"?><!--CoordinatorLayout加强版的FrameLayout,可以监听其所有子控件的各种事件-->
<android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="dxt.com.gcollaspingtoolbarlayou.MainActivity">
    <!--AppBarLayout实际上是一个垂直方向上的LinearLayout-->
    <android.support.design.widget.AppBarLayout
        android:id="@+id/appBar"
        android:layout_width="match_parent"
        android:layout_height="250dp">

        <android.support.design.widget.CollapsingToolbarLayout
            android:id="@+id/collapsing_toolbar"

            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
            app:contentScrim="?attr/colorPrimary"
            app:layout_scrollFlags="scroll|exitUntilCollapsed">

            <ImageView
                android:id="@+id/fruit_image"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:scaleType="centerCrop"
                app:layout_collapseMode="parallax" />

            <android.support.v7.widget.Toolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:layout_collapseMode="pin"></android.support.v7.widget.Toolbar>

        </android.support.design.widget.CollapsingToolbarLayout>


    </android.support.design.widget.AppBarLayout>

    <android.support.v4.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <android.support.v7.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_margin="15dp"
                app:cardCornerRadius="4dp"
              >

                <TextView
                    android:id="@+id/fruit_content_text"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_margin="10dp"></TextView>
            </android.support.v7.widget.CardView>

        </LinearLayout>
    </android.support.v4.widget.NestedScrollView>

    <android.support.design.widget.FloatingActionButton
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:src="@mipmap/ic_launcher"
        app:layout_anchor="@id/appBar"
        app:layout_anchorGravity="bottom|end">

    </android.support.design.widget.FloatingActionButton>
</android.support.design.widget.CoordinatorLayout><!--//CollapsingToolbarLayout是一个作用于Toolbar基础之上的布局
      ，设计被限定只能作为AppbarLayout的直接子布局来使用
//而AppbarLayout又必须结合CoordinatorLayout的子布局

app:contentScrim="?attr/colorPrimary"
用于指定CollapsingToolbarLayout在趋于折叠状态以及折叠之后的背景色
CollapsingToolbarLayout在折叠之后就是一个普通的Toolbar,背景色就是colorPrimary
scroll：随着滚动一起滚动
exitUntilCollapsed：随着滚动完成之后就保留在界面上，不再移出屏幕



app:layout_collapseMode="pin"在折叠过程中位置始终保持不变
Image parallax，在折叠过程中会产生一定的错位偏移，效果比较好


NestedScrollView:1它允许使用滚动的方式来查看屏幕以外的数据
2嵌套响应滚动事件的功能
不管是ScrollView还是NestedScrollView，它们的内部都只允许存在一个直接子布局


 app:layout_anchor="@id/appBar"指定一个锚点，
-->